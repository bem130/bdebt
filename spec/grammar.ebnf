<module> := <expr_>

<expr_> := sepBl( <expr> , <sep>+ , "ignore")

<expr> := <literal> | <funcCall> | <variable> | <parenExpr> | <binOperator> | <prop>
    <parenExpr> := "{" <expr_> "}" | "(" <expr_> ")"
    <prop> : = "." <expr>
    <binOperator> := "+" | "-" | "*" | "+"
    <funcCall> := <funcCallPN> | <funcCallRPN>
        <funcCallPN>  := "(:" <sep>* <expr> <sep>+ <expr_> <sep>* ")" | "(" <sep>* <expr> <sep>* ":" <sep>* <expr_> <sep>* ")"
        <funcCallRPN> := "(" <sep>* <expr_> <sep>* ":" <sep>* <expr> <sep>* ")"
    <variable> := <identifier>
        <identifier> := /^([a-zA-Zぁ-んァ-ン一-龯][a-zA-Z0-9_$ぁ-んァ-ン一-龯]*)$/

<literal> := <bool> | <number> | <string> | <array> | <object>
    <array> := "[" <sep>* sepBl( <expr> , <sep>+ , "allow" ) "]"
    <object> := "[" <sep>* sepBl( ( <identifier> | <string>) <sep>* ":" <sep>* <expr> , <sep>+ , "allow" ) "]" | "[" <sep>* ":" <sep>* "]"
    <string> := "\"" <char>* "\""
        <char> := <escape> / <letter>
            <escape> := "\\0" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v" | "\\'" | "\\\"" | "\\\\" | <unicode>
                <unicode> := "\\u" <digit16>[4]
            <letter> := /^[^\""\0]$/
    <bool> := <true> | <false>
        <true> := "true"
        <false> := "false"
    <number> := <int2> | <int16> | <float> | <int>
        <float> := <sign>? <digit>+ "." <digit>*
        <int> := <sign>? <digit>+
        <int2> := <sign>? "0b" <digit2>+
        <int16> := <sign>? "0x" <digit16>+
            <sign> := "+" | "-"
            <digit> := /^[0-9]$/
            <digit2> := /^(0|1)$/
            <digit16> := /^(0-9a-fA-F)$/

<sep> := " " | "\n"