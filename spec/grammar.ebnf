<module> := <expr_>

<expr_> := <expr> ( <sep>+ <expr> )*

<expr> := <literal> | <funcCall> | <variable> | <paren_expr> | <prop>
    <paren_expr> := "<" <expr_> ">"
    <prop> : = <propDot> | <propBracket>
        <propDot> := <expr> "." <identifier>
        <propBracket> := <expr> "[" <expr> "]"
    <funcCall> := <funcCall1> | <funcCall2> | <funcCall3>
        <funcCall1> := <expr> "(" <sep>* <expr_> <sep>* ")"
        <funcCall2> := "(:" <expr> <sep>+ <expr_> <sep>* ")"
        <funcCall3> := "(" <sep>* <expr_> <sep>+ <expr> ":)"
    <variable> := <identifier>
        <identifier> := /^([a-zA-Zぁ-んァ-ン一-龯][a-zA-Z0-9_$ぁ-んァ-ン一-龯]*)$/

<literal> := <bool> | <number> | <string> | <array> | <object>
    <bool> := <true> | <false>
        <true> := "true"
        <false> := "false"
    <number> := <float> | <int> | <int2> | <int16>
        <float> := <sign>? <digit>+ "." <digit>*
        <int> := <sign>? <digit>+
        <int2> := <sign>? "0b" <digit2>+
        <int16> := <sign>? "0x" <digit16>+
            <sign> := "+" | "-"
            <digit> := /^[0-9]$/
            <digit2> := /^(0|1)$/
            <digit16> := /^(0-9a-fA-F)$/
    <string> := "\"" <char>* "\""
        <char> := <escape> / <letter>
            <escape> := "\\0" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v" | "\\'" | "\\\"" | "\\\\" | <unicode>
                <unicode> := "\\u" <digit16>[4]
            <letter> := /^[^\""\0]$/
    <array> := "[" <expr> ( "," <expr> )* (",")? "]"
    <object> := "{" ( <identifier> ":" <expr> ) ( "," ( <identifier> ":" <expr> ) )* (",")? "}"

<sep> := " " | "\n"